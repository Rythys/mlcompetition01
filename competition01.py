# -*- coding: utf-8 -*-
"""competition01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B-3Vh1YWcIbP1tdLwf6Gy7xZieOfGVaf
"""

import pandas as pd
import numpy as np

train = pd.read_csv("train.csv")
test = pd.read_csv("test.csv")

train

test

print(train.shape, test.shape)

"""Очистка данных и преобразование в np.array"""

y = train['label'].values

np.unique(y)

y.shape

"""Если в лейблах есть пропуски, то эти строки удаляются"""

train = train.dropna(subset='label')

y = train['label'].to_numpy()

y.shape

trainX = train.drop(columns=['label', 'id'])

trainX

import matplotlib.pyplot as plt

trainX['88'].hist(bins=20)
plt.show()

trainX_copy = trainX
trainX = trainX.to_numpy()

trainX.shape

test = test.drop(columns=['id'])

testX = test.to_numpy()

"""Почистил столбец label и засунул все в np array. Далее буду работать с пропущенными значениями

"""

from sklearn.impute import MissingIndicator, SimpleImputer

def missingValuesCounter(trainX, testX):
  indicator = MissingIndicator()
  train_mask_missing_values_only = indicator.fit_transform(trainX)
  test_mask_missing_values_only = indicator.fit_transform(testX)
  return np.sum(train_mask_missing_values_only), np.sum(test_mask_missing_values_only)

def imputer(imp_fr):
  imp_fr = SimpleImputer(missing_values=np.nan, strategy='mean')
  trainX_without_missing = imp_fr.fit_transform(trainX)
  testX_without_missing = imp_fr.fit_transform(testX)
  return trainX_without_missing, testX_without_missing

indicator = MissingIndicator()
train_mask_missing_values_only = indicator.fit_transform(trainX)
test_mask_missing_values_only = indicator.fit_transform(testX)
print(np.sum(train_mask_missing_values_only))
print(np.sum(test_mask_missing_values_only))

#print(missingValuesCounter(trainX, testX))

# Из графиков для признаков видно, что они распределены нормально, поэтому среднее будет состоятельной несмещенной оценкой ?
imp_fr = SimpleImputer(missing_values=np.nan, strategy='mean')
# trainX_without_missing, testX_without_missing = imputer(imp_fr)
trainX_without_missing = imp_fr.fit_transform(trainX)
testX_without_missing = imp_fr.fit_transform(testX)

indicator = MissingIndicator()
train_mask_missing_values_only = indicator.fit_transform(trainX_without_missing)
test_mask_missing_values_only = indicator.fit_transform(testX_without_missing)
print(np.sum(train_mask_missing_values_only))
print(np.sum(test_mask_missing_values_only))
# train_mask_missing_values_only, test_mask_missing_values_only = missingValuesCounter(trainX, testX)
#

from sklearn.model_selection import train_test_split

X_train, X_val, y_train, y_val = train_test_split(trainX_without_missing, y, test_size=0.25, random_state=42)

from sklearn.linear_model import LinearRegression, Lasso
from sklearn.metrics import roc_auc_score

np.unique(y)

from sklearn.neighbors import KNeighborsClassifier

classifier1 = KNeighborsClassifier(n_neighbors=5)
classifier1.fit(X_train, y_train)
y_pred1 = classifier1.predict_proba(X_val)
print(roc_auc_score(y_val, y_pred1, multi_class='ovo'))

classifier2 = KNeighborsClassifier(n_neighbors=10)
classifier2.fit(X_train, y_train)
y_pred2 = classifier2.predict_proba(X_val)
print(roc_auc_score(y_val, y_pred2, multi_class='ovo'))

classifier3 = KNeighborsClassifier(n_neighbors=20)
classifier3.fit(trainX_without_missing, y)
y_pred3 = classifier3.predict_proba(X_val)
print(roc_auc_score(y_val, y_pred3, multi_class='ovo'))

classifier1 = KNeighborsClassifier(n_neighbors=15)
classifier1.fit(X_train, y_train)
y_pred1 = classifier1.predict_proba(X_val)
print(roc_auc_score(y_val, y_pred1, multi_class='ovo'))

y_pred_res1 = classifier3.predict_proba(testX_without_missing)

y_pred_res1 = np.argmax(y_pred_res1, axis=1)

y_pred_res1

submission1 = pd.read_csv('sample_sabmission.csv')

submission1['label'] = y_pred_res1

testX_without_missing.shape

submission1.to_csv('Юсупов_Роберт.csv', index=False)

y_pred1

np.argmax(y_pred1, axis=1)

y

"""Метод опорных векторов"""

def train(model, X_train, y_train, X_val):
  model.fit(X_train, y_train)
  y_pred = model.predict(X_val)
  return y_pred

def accuracy(y_val, y_pred):
  return accuracy_score(y_val, y_pred)

from sklearn import svm

clf = svm.SVC()
clf.fit(X_train,y_train)

y_svm1 = clf.predict(X_val)

from sklearn.metrics import accuracy_score
print(accuracy_score(y_val, y_svm1))
print(accuracy_score(y_val, np.argmax(y_pred3, axis=1)))

clf_sab = svm.SVC()
clf_sab.fit(trainX_without_missing,y)

y_pred4 = clf_sab.predict(testX_without_missing)

submission = pd.read_csv('sample_sabmission.csv')
submission['label'] = y_pred4
submission.to_csv('Юсупов_Роберт.csv', index=False)

"""Пробую заменить пропуски в данных алгоритмом MICE"""

#from sklearn.experimental import enable_iterative_imputer
#from sklearn.impute import IterativeImputer
#from sklearn.impute import MissingIndicator

#imp_mean = IterativeImputer(random_state=0)
#X_train_mice = imp_mean.fit_transform(trainX)
#X_test_mice = imp_mean.fit_transform(testX)

#indicator = MissingIndicator()
#train_mask_mice = indicator.fit_transform(X_train_mice)
#test_mask_mice = indicator.fit_transform(X_test_mice)
#print(np.sum(train_mask_mice))
#print(np.sum(test_mask_mice))

#X_train.shape

#trainX.shape

#X_train_mice.shape

#from sklearn.model_selection import train_test_split

#Xm_train, Xm_val, ym_train, ym_val = train_test_split(X_train_mice, y, test_size=0.25, random_state=42)

#classifier5 = KNeighborsClassifier(n_neighbors=10)
#classifier5.fit(Xm_train, ym_train)
#y_pred5 = classifier5.predict_proba(Xm_val)
#print(roc_auc_score(ym_val, y_pred5, multi_class='ovo'))

#y_pred5_sab = classifier5.predict_proba(X_test_mice)

#print(accuracy_score(ym_val, np.argmax(y_pred5, axis=1)))

#from sklearn import svm

#clf2 = svm.SVC()
#clf2.fit(X_train_mice,y)

#y_svm2 = clf2.predict(Xm_val)

#from sklearn.metrics import accuracy_score
#print(accuracy_score(ym_val, y_svm2))

#y_svm2_sab = clf2.predict(X_test_mice)

#X_test_mice.shape

#np.argmax(y_pred5_sab, axis=1).shape

#submission3 = pd.read_csv('sample_sabmission.csv')
#submission3['label'] = y_svm2_sab
#submission3.to_csv('Юсупов_Роберт.csv', index=False)

"""MICE работает абслютно также как и simpleImputer

Попробуем удалить колонки в которых 10к пропусков
"""

print(np.sum(trainX_copy.isnull().sum() > 10000))

trainX_10000 = trainX_copy.dropna(axis=1,thresh=40000)
print(np.sum(trainX_10000.isnull().sum() > 10000))

trainX_10000 = trainX_10000.to_numpy()

tmp = trainX_copy.isnull().sum() > 10000

tmp = tmp.to_list()

cols = []
for i in range(len(tmp)):
  if tmp[i]:
    cols.append(i)

cols

cols = ['1', '2', '3', '6', '7', '10', '11', '12', '13', '14']

testX_10000 = test.drop(columns=['1', '2', '3', '6', '7', '10', '11', '12', '13', '14'])
print(np.sum(test.isnull().sum() > 10000))

testX = test.to_numpy()

indicator = MissingIndicator()
train10000_mask_missing_values_only = indicator.fit_transform(trainX_10000)
test10000_mask_missing_values_only = indicator.fit_transform(testX_10000)
print(np.sum(train10000_mask_missing_values_only))
print(np.sum(test10000_mask_missing_values_only))

imp_fr = SimpleImputer(missing_values=np.nan, strategy='mean')

trainX10000_without_missing = imp_fr.fit_transform(trainX_10000)
testX10000_without_missing = imp_fr.fit_transform(testX_10000)

indicator = MissingIndicator()
train10000_mask_missing_values_only = indicator.fit_transform(trainX10000_without_missing)
test10000_mask_missing_values_only = indicator.fit_transform(testX10000_without_missing)
print(np.sum(train10000_mask_missing_values_only))
print(np.sum(test10000_mask_missing_values_only))

from sklearn import svm

clf3 = svm.SVC()
clf3.fit(trainX10000_without_missing,y)

y_svm3_sab = clf3.predict(testX10000_without_missing)

submission4 = pd.read_csv('sample_sabmission.csv')
submission4['label'] = y_svm3_sab
submission4.to_csv('Yusupov_Robert.csv', index=False)